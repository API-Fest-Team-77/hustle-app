openapi: 3.0.0
info:
  version: 'v1'
  title: 'Hustle-API'
servers:
  - url: 'localhost:3000'
paths:
  /login:
    post:
      summary: 'Returns details about a particular user'
      operationId: loginUser
      tags:
        - login
      requestBody:
        required: true
        description: user details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuth"
      responses:
        '200':
          description: 'Login is successful'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
        '401':
          description: 'incorrect username/passowrd'
  /signup:
    post:
      summary: 'Registers an user'
      operationId: UserSignup
      tags:
        - signup
      requestBody:
        required: true
        description: user details
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/UserSignup"
                
      responses:
        '201':
          description: 'Signup is successful'
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
        '401':
          description: 'invalid inputs'
  /profile:
    get:
      summary: 'returns the profile details of a user'
      operationId: UserProfile
      tags:
        - profile
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: 'profile details retrived'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
            description: 'user does not exist'
    put:
      summary: 'edit the profile details of a user'
      operationId: UserProfile
      tags:
        - profile
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '201':
          description: 'profile details updated'
  /post:
    get:
      summary: 'Get a post'
      operationId: getPost
      tags:
        - post
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: 'post details retrived'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/post'
        '404':
          description: 'post not found' 
    post:
      summary: 'create a post'
      operationId: createPost
      tags:
        - post
      requestBody:
        required: true
        description: post info
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/post"
      responses:
        '201':
          description: 'post created'
        '403':
          description: 'invalid post' 
    put:
      summary: 'update a post'
      operationId: updatePost
      tags:
        - post
      requestBody:
        required: true
        description: post info
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/post"
      responses:
        '201':
          description: 'post details updated'
        '403':
          description: 'invalid post'
        '404':
          description: 'post not found' 
    delete:
      summary: 'delete a post'
      operationId: deletePost
      tags:
        - post
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: 'post details deleted'
        '404':
          description: 'post not found' 
  /postsByCategory:
    get:
      summary: 'Get array of posts by category'
      operationId: getPostsByCategory
      tags:
        - postsByCategory
      parameters:
        - $ref: '#/components/parameters/category'
      responses:
        '200':
          description: 'post details retrived'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postsByCategory'
        '404':
          description: 'post not found' 
  /categories:
    get:
      summary: 'Get all categories'
      operationId: getCategories
      tags:
        - categories
      
      responses:
        '200':
          description: 'categories retrived'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/categories'      
  /posts:
    get:
      summary: 'Get all posts'
      operationId: getPosts
      tags:
        - posts
      responses:
        '200':
          description: 'post details retrived'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/posts'
        '404':
          description: 'post not found' 
components:
  parameters:
    username:
        name: username
        in: query
        description: username of the user
        required: true
        schema:
          type: string
    id:
        name: id
        in: query
        description: ID of the post
        required: true
        schema:
            type: string
    category:
        name: category
        in: query
        description: category of the post
        required: true
        schema:
            $ref: "#/components/schemas/category"
  schemas:
    session:
        type: object
        required:
            - logged_in
        properties:
            logged_in:
                type: boolean
                default: false
    UserAuth:
        type: object
        required:
            - username
            - password
        properties:
            username:
                type: string
            password:
                type: string
    UserSignup:
        type: object
        required:
            - username
            - password
            - email
        properties:
            username:
                type: string
            password:
                type: string
            email:
                type: string
    User:
      type: object
      required:
          - id
          - username
          - firstName
          - email
      properties:
        id:
          type: string
        username:
            type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        profilePictureURL:
          type: string
        location:
            type: string
        interests:
            description: array of interests of an user
            type: array
            items:
                $ref: "#/components/schemas/category"
        jobDescription:
            type: object
            $ref : '#/components/schemas/jobDescription'
    jobDescription:
        type: object
        description: job title and company name
        properties:
            jobTitle:
                type: string
            company:
                type: string
    category:
        type: string
    categories:
        type: array
        items:
            $ref: "#/components/schemas/category"
    post:
        type: object
        description: 'post of an idea'
        required:
            - id
            - title
            - body
        properties:
            id:
                type: string
            title:
                type: string
            body: 
                type: string
            interestCount:
                type: integer
            category:
                $ref: "#/components/schemas/category"
    posts:
        type: array
        description: 'array of all posts'
        items:
            $ref: "#/components/schemas/post"
    postsByCategory:
        type: array
        description: 'array of posts of same category'
        items:
            $ref: "#/components/schemas/post"
            
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
security:
  - BasicAuth: []