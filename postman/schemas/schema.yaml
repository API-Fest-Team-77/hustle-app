openapi: 3.0.0
info:
  version: "v1"
  title: "Hustle-API"
servers:
  - url: "https://hustle-app-api-fest.herokuapp.com/"
    description: deployed server
paths:
  /auth/login:
    post:
      summary: "Login"
      operationId: loginUser
      tags:
        - login
      requestBody:
        required: true
        description: user details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuth"
      responses:
        "200":
          description: "Login is successful"
        "404":
          description: "user not found"
  /auth/signup:
    post:
      summary: "Signup"
      operationId: UserSignup
      tags:
        - signup
      requestBody:
        required: true
        description: user details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignup"

      responses:
        "201":
          description: "Signup is successful"
  /users/{id}:
    get:
      summary: "return profile"
      operationId: getUserProfile
      tags:
        - profile
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: "profile details retrived"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "user does not exist"
    put:
      summary: "update profile"
      operationId: updateUserProfile
      tags:
        - profile
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        description: user details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "profile details updated"
    delete:
      summary: "delete profile"
      operationId: deleteUserProfile
      tags:
        - profile
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "201":
          description: "profile details updated"
  /users/{id}/follow:
    post:
      summary: "follow another user"
      operationId: followUser
      tags:
        - follow
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        description: user id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/id"
      responses:
        "201":
          description: "user followed"
        "403":
          description: "you already follow this user or you cannot follow yourself"
  /users/{id}/unfollow:
    post:
      summary: "unfollow another user"
      operationId: followUser
      tags:
        - follow
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        description: user id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/id"
      responses:
        "201":
          description: "unfollowed!"
        "403":
          description: "you don't follow this user or you cannot unfollow yourself"
  /posts:
    get:
      summary: "get all the posts"
      description: "Return all the posts that are in our app"
      operationId: getPosts
      tags:
        - posts
      responses:
        "200":
          description: "An array of blog posts in JSON format"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/posts"
    post:
      summary: "create a post"
      operationId: createPost
      tags:
        - post
      requestBody:
        required: true
        description: post info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post"
      responses:
        "200":
          description: "Request is sucessful and a post created"
        "500":
          description: "error"
  /posts/{id}:
    get:
      summary: "Get a post"
      operationId: getPost
      tags:
        - post
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: "Returned a specific post by id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/post"
        "404":
          description: "post not found"

    put:
      summary: "update a post"
      operationId: updatePost
      tags:
        - post
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        description: post info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post"
      responses:
        "201":
          description: "post details updated"
        "403":
          description: "not authorized"
    delete:
      summary: "delete a post"
      operationId: deletePost
      tags:
        - post
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: "post details deleted"
        "403":
          description: "not authorized"
  /posts/{id}/like:
    put:
      summary: "like a post"
      operationId: likePost
      tags:
        - post
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        description: post info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/post"
      responses:
        "201":
          description: "You liked this post!"
        "403":
          description: "You Disliked this post!"
  /timeline:
    get:
      summary: "get your timeline"
      operationId: updatePost
      tags:
        - post
      requestBody:
        required: true
        description: user info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userId"
      responses:
        "201":
          description: "post details updated"
        "403":
          description: "not authorized"

components:
  parameters:
    username:
      name: username
      in: path
      description: username of the user
      required: true
      schema:
        type: string
    id:
      name: id
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
  schemas:
    id:
      type: string
    userId:
      type: string
    imageURL:
      type: string
    UserSignup:
        type: object
        required:
            - username
            - password
            - email
        properties:
            username:
                type: string
            password:
                type: string
            email:
                type: string
    UserAuth:
        type: object
        required:
            - username
            - password
        properties:
            username:
                type: string
            password:
                type: string
    User:
      type: object
      required:
        - _id
        - username
        - firstName
        - email
      properties:
        _id:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        profilePicture:
          type: string
        location:
          type: string
        jobTitle:
          type: string
        companyName:
          type: string
        about:
          type: string
        followers:
          type: array
          items:
            $ref: "#/components/schemas/userId"
        following:
          type: array
          items:
            $ref: "#/components/schemas/userId"
        createdAt:
            type: string
        updatedAt:
            type: string
        __v:
            type: integer

        
    post:
      type: object
      description: "post of an idea"
      required:
        - userId
        - title
        - content
        - images
        - likes
      properties:
        id:
          type: string
        userId:
          type: string
        title:
          type: string
        content:
          type: string
        likes:
          type: array
          items: 
              $ref: "#/components/schemas/userId"
        images:
          $ref: "#/components/schemas/imageURL"